/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export type ModuleDataStruct = {
  modules: PromiseOrValue<BigNumberish>[];
  args: PromiseOrValue<BytesLike>[];
};

export type ModuleDataStructOutput = [number[], string[]] & {
  modules: number[];
  args: string[];
};

export interface IAutomateInterface extends utils.Interface {
  functions: {
    "cancelTask(bytes32)": FunctionFragment;
    "createTask(address,bytes,(uint8[],bytes[]),address)": FunctionFragment;
    "exec(address,address,bytes,(uint8[],bytes[]),uint256,address,bool,bool)": FunctionFragment;
    "gelato()": FunctionFragment;
    "getFeeDetails()": FunctionFragment;
    "getTaskId(address,address,bytes4,(uint8[],bytes[]),address)": FunctionFragment;
    "getTaskId(address,address,bytes4,bool,address,bytes32)": FunctionFragment;
    "getTaskIdsByUser(address)": FunctionFragment;
    "taskTreasury()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelTask"
      | "createTask"
      | "exec"
      | "gelato"
      | "getFeeDetails"
      | "getTaskId(address,address,bytes4,(uint8[],bytes[]),address)"
      | "getTaskId(address,address,bytes4,bool,address,bytes32)"
      | "getTaskIdsByUser"
      | "taskTreasury"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelTask",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createTask",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      ModuleDataStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exec",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      ModuleDataStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "gelato", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFeeDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskId(address,address,bytes4,(uint8[],bytes[]),address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      ModuleDataStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskId(address,address,bytes4,bool,address,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskIdsByUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "taskTreasury",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "cancelTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exec", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gelato", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskId(address,address,bytes4,(uint8[],bytes[]),address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskId(address,address,bytes4,bool,address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskIdsByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskTreasury",
    data: BytesLike
  ): Result;

  events: {
    "TaskCancelled(bytes32,address)": EventFragment;
    "TaskCreated(address,address,bytes,tuple,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TaskCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskCreated"): EventFragment;
}

export interface TaskCancelledEventObject {
  taskId: string;
  taskCreator: string;
}
export type TaskCancelledEvent = TypedEvent<
  [string, string],
  TaskCancelledEventObject
>;

export type TaskCancelledEventFilter = TypedEventFilter<TaskCancelledEvent>;

export interface TaskCreatedEventObject {
  taskCreator: string;
  execAddress: string;
  execDataOrSelector: string;
  moduleData: ModuleDataStructOutput;
  feeToken: string;
  taskId: string;
}
export type TaskCreatedEvent = TypedEvent<
  [string, string, string, ModuleDataStructOutput, string, string],
  TaskCreatedEventObject
>;

export type TaskCreatedEventFilter = TypedEventFilter<TaskCreatedEvent>;

export interface IAutomate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAutomateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelTask(
      taskId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createTask(
      execAddress: PromiseOrValue<string>,
      execDataOrSelector: PromiseOrValue<BytesLike>,
      moduleData: ModuleDataStruct,
      feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exec(
      taskCreator: PromiseOrValue<string>,
      execAddress: PromiseOrValue<string>,
      execData: PromiseOrValue<BytesLike>,
      moduleData: ModuleDataStruct,
      txFee: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      useTaskTreasuryFunds: PromiseOrValue<boolean>,
      revertOnFailure: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gelato(overrides?: CallOverrides): Promise<[string]>;

    getFeeDetails(overrides?: CallOverrides): Promise<[BigNumber, string]>;

    "getTaskId(address,address,bytes4,(uint8[],bytes[]),address)"(
      taskCreator: PromiseOrValue<string>,
      execAddress: PromiseOrValue<string>,
      execSelector: PromiseOrValue<BytesLike>,
      moduleData: ModuleDataStruct,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { taskId: string }>;

    "getTaskId(address,address,bytes4,bool,address,bytes32)"(
      taskCreator: PromiseOrValue<string>,
      execAddress: PromiseOrValue<string>,
      execSelector: PromiseOrValue<BytesLike>,
      useTaskTreasuryFunds: PromiseOrValue<boolean>,
      feeToken: PromiseOrValue<string>,
      resolverHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTaskIdsByUser(
      _taskCreator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    taskTreasury(overrides?: CallOverrides): Promise<[string]>;
  };

  cancelTask(
    taskId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createTask(
    execAddress: PromiseOrValue<string>,
    execDataOrSelector: PromiseOrValue<BytesLike>,
    moduleData: ModuleDataStruct,
    feeToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exec(
    taskCreator: PromiseOrValue<string>,
    execAddress: PromiseOrValue<string>,
    execData: PromiseOrValue<BytesLike>,
    moduleData: ModuleDataStruct,
    txFee: PromiseOrValue<BigNumberish>,
    feeToken: PromiseOrValue<string>,
    useTaskTreasuryFunds: PromiseOrValue<boolean>,
    revertOnFailure: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gelato(overrides?: CallOverrides): Promise<string>;

  getFeeDetails(overrides?: CallOverrides): Promise<[BigNumber, string]>;

  "getTaskId(address,address,bytes4,(uint8[],bytes[]),address)"(
    taskCreator: PromiseOrValue<string>,
    execAddress: PromiseOrValue<string>,
    execSelector: PromiseOrValue<BytesLike>,
    moduleData: ModuleDataStruct,
    feeToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getTaskId(address,address,bytes4,bool,address,bytes32)"(
    taskCreator: PromiseOrValue<string>,
    execAddress: PromiseOrValue<string>,
    execSelector: PromiseOrValue<BytesLike>,
    useTaskTreasuryFunds: PromiseOrValue<boolean>,
    feeToken: PromiseOrValue<string>,
    resolverHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTaskIdsByUser(
    _taskCreator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  taskTreasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cancelTask(
      taskId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createTask(
      execAddress: PromiseOrValue<string>,
      execDataOrSelector: PromiseOrValue<BytesLike>,
      moduleData: ModuleDataStruct,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    exec(
      taskCreator: PromiseOrValue<string>,
      execAddress: PromiseOrValue<string>,
      execData: PromiseOrValue<BytesLike>,
      moduleData: ModuleDataStruct,
      txFee: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      useTaskTreasuryFunds: PromiseOrValue<boolean>,
      revertOnFailure: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    gelato(overrides?: CallOverrides): Promise<string>;

    getFeeDetails(overrides?: CallOverrides): Promise<[BigNumber, string]>;

    "getTaskId(address,address,bytes4,(uint8[],bytes[]),address)"(
      taskCreator: PromiseOrValue<string>,
      execAddress: PromiseOrValue<string>,
      execSelector: PromiseOrValue<BytesLike>,
      moduleData: ModuleDataStruct,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getTaskId(address,address,bytes4,bool,address,bytes32)"(
      taskCreator: PromiseOrValue<string>,
      execAddress: PromiseOrValue<string>,
      execSelector: PromiseOrValue<BytesLike>,
      useTaskTreasuryFunds: PromiseOrValue<boolean>,
      feeToken: PromiseOrValue<string>,
      resolverHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTaskIdsByUser(
      _taskCreator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    taskTreasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "TaskCancelled(bytes32,address)"(
      taskId?: null,
      taskCreator?: null
    ): TaskCancelledEventFilter;
    TaskCancelled(taskId?: null, taskCreator?: null): TaskCancelledEventFilter;

    "TaskCreated(address,address,bytes,tuple,address,bytes32)"(
      taskCreator?: PromiseOrValue<string> | null,
      execAddress?: PromiseOrValue<string> | null,
      execDataOrSelector?: null,
      moduleData?: null,
      feeToken?: null,
      taskId?: PromiseOrValue<BytesLike> | null
    ): TaskCreatedEventFilter;
    TaskCreated(
      taskCreator?: PromiseOrValue<string> | null,
      execAddress?: PromiseOrValue<string> | null,
      execDataOrSelector?: null,
      moduleData?: null,
      feeToken?: null,
      taskId?: PromiseOrValue<BytesLike> | null
    ): TaskCreatedEventFilter;
  };

  estimateGas: {
    cancelTask(
      taskId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createTask(
      execAddress: PromiseOrValue<string>,
      execDataOrSelector: PromiseOrValue<BytesLike>,
      moduleData: ModuleDataStruct,
      feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exec(
      taskCreator: PromiseOrValue<string>,
      execAddress: PromiseOrValue<string>,
      execData: PromiseOrValue<BytesLike>,
      moduleData: ModuleDataStruct,
      txFee: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      useTaskTreasuryFunds: PromiseOrValue<boolean>,
      revertOnFailure: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gelato(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeDetails(overrides?: CallOverrides): Promise<BigNumber>;

    "getTaskId(address,address,bytes4,(uint8[],bytes[]),address)"(
      taskCreator: PromiseOrValue<string>,
      execAddress: PromiseOrValue<string>,
      execSelector: PromiseOrValue<BytesLike>,
      moduleData: ModuleDataStruct,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTaskId(address,address,bytes4,bool,address,bytes32)"(
      taskCreator: PromiseOrValue<string>,
      execAddress: PromiseOrValue<string>,
      execSelector: PromiseOrValue<BytesLike>,
      useTaskTreasuryFunds: PromiseOrValue<boolean>,
      feeToken: PromiseOrValue<string>,
      resolverHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaskIdsByUser(
      _taskCreator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taskTreasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelTask(
      taskId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createTask(
      execAddress: PromiseOrValue<string>,
      execDataOrSelector: PromiseOrValue<BytesLike>,
      moduleData: ModuleDataStruct,
      feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exec(
      taskCreator: PromiseOrValue<string>,
      execAddress: PromiseOrValue<string>,
      execData: PromiseOrValue<BytesLike>,
      moduleData: ModuleDataStruct,
      txFee: PromiseOrValue<BigNumberish>,
      feeToken: PromiseOrValue<string>,
      useTaskTreasuryFunds: PromiseOrValue<boolean>,
      revertOnFailure: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gelato(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTaskId(address,address,bytes4,(uint8[],bytes[]),address)"(
      taskCreator: PromiseOrValue<string>,
      execAddress: PromiseOrValue<string>,
      execSelector: PromiseOrValue<BytesLike>,
      moduleData: ModuleDataStruct,
      feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTaskId(address,address,bytes4,bool,address,bytes32)"(
      taskCreator: PromiseOrValue<string>,
      execAddress: PromiseOrValue<string>,
      execSelector: PromiseOrValue<BytesLike>,
      useTaskTreasuryFunds: PromiseOrValue<boolean>,
      feeToken: PromiseOrValue<string>,
      resolverHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaskIdsByUser(
      _taskCreator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taskTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
