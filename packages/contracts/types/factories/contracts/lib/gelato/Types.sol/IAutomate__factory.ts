/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  IAutomate,
  IAutomateInterface,
} from "../../../../../contracts/lib/gelato/Types.sol/IAutomate";
import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "taskId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "taskCreator",
        type: "address",
      },
    ],
    name: "TaskCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "taskCreator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "execAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "execDataOrSelector",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "enum Module[]",
            name: "modules",
            type: "uint8[]",
          },
          {
            internalType: "bytes[]",
            name: "args",
            type: "bytes[]",
          },
        ],
        indexed: false,
        internalType: "struct ModuleData",
        name: "moduleData",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "taskId",
        type: "bytes32",
      },
    ],
    name: "TaskCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "taskId",
        type: "bytes32",
      },
    ],
    name: "cancelTask",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "execAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "execDataOrSelector",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "enum Module[]",
            name: "modules",
            type: "uint8[]",
          },
          {
            internalType: "bytes[]",
            name: "args",
            type: "bytes[]",
          },
        ],
        internalType: "struct ModuleData",
        name: "moduleData",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
    ],
    name: "createTask",
    outputs: [
      {
        internalType: "bytes32",
        name: "taskId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "taskCreator",
        type: "address",
      },
      {
        internalType: "address",
        name: "execAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "execData",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "enum Module[]",
            name: "modules",
            type: "uint8[]",
          },
          {
            internalType: "bytes[]",
            name: "args",
            type: "bytes[]",
          },
        ],
        internalType: "struct ModuleData",
        name: "moduleData",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "txFee",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
      {
        internalType: "bool",
        name: "useTaskTreasuryFunds",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "revertOnFailure",
        type: "bool",
      },
    ],
    name: "exec",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gelato",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFeeDetails",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "taskCreator",
        type: "address",
      },
      {
        internalType: "address",
        name: "execAddress",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "execSelector",
        type: "bytes4",
      },
      {
        components: [
          {
            internalType: "enum Module[]",
            name: "modules",
            type: "uint8[]",
          },
          {
            internalType: "bytes[]",
            name: "args",
            type: "bytes[]",
          },
        ],
        internalType: "struct ModuleData",
        name: "moduleData",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
    ],
    name: "getTaskId",
    outputs: [
      {
        internalType: "bytes32",
        name: "taskId",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "taskCreator",
        type: "address",
      },
      {
        internalType: "address",
        name: "execAddress",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "execSelector",
        type: "bytes4",
      },
      {
        internalType: "bool",
        name: "useTaskTreasuryFunds",
        type: "bool",
      },
      {
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "resolverHash",
        type: "bytes32",
      },
    ],
    name: "getTaskId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_taskCreator",
        type: "address",
      },
    ],
    name: "getTaskIdsByUser",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "taskTreasury",
    outputs: [
      {
        internalType: "contract ITaskTreasuryUpgradable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IAutomate__factory {
  static readonly abi = _abi;
  static createInterface(): IAutomateInterface {
    return new utils.Interface(_abi) as IAutomateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAutomate {
    return new Contract(address, _abi, signerOrProvider) as IAutomate;
  }
}
