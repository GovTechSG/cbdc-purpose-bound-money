/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import * as Contracts from ".";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";
import { ethers } from "ethers";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1967Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967Upgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ITimeLockVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITimeLockVault__factory>;
    getContractFactory(
      name: "TimeLockVaultErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimeLockVaultErrors__factory>;
    getContractFactory(
      name: "TimeLockVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimeLockVault__factory>;
    getContractFactory(
      name: "PBMAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PBMAccessControl__factory>;
    getContractFactory(
      name: "PBMBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PBMBase__factory>;
    getContractFactory(
      name: "PBMVaultBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PBMVaultBase__factory>;
    getContractFactory(
      name: "IPBM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPBM__factory>;
    getContractFactory(
      name: "IPBMTaskManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPBMTaskManager__factory>;
    getContractFactory(
      name: "PBMAccessControlErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PBMAccessControlErrors__factory>;
    getContractFactory(
      name: "PBMBaseErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PBMBaseErrors__factory>;
    getContractFactory(
      name: "PBMTaskManagerErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PBMTaskManagerErrors__factory>;
    getContractFactory(
      name: "PBMVaultBaseErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PBMVaultBaseErrors__factory>;
    getContractFactory(
      name: "AutomateReady",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutomateReady__factory>;
    getContractFactory(
      name: "AutomateTaskCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutomateTaskCreator__factory>;
    getContractFactory(
      name: "IAutomate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAutomate__factory>;
    getContractFactory(
      name: "IOpsProxyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOpsProxyFactory__factory>;
    getContractFactory(
      name: "ITaskTreasuryUpgradable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITaskTreasuryUpgradable__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "MockPBMTaskManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPBMTaskManager__factory>;
    getContractFactory(
      name: "MockPBMTaskManagerFailCancellation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPBMTaskManagerFailCancellation__factory>;
    getContractFactory(
      name: "MockPBMTaskManagerRevert",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPBMTaskManagerRevert__factory>;
    getContractFactory(
      name: "PBM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PBM__factory>;
    getContractFactory(
      name: "PBMStandard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PBMStandard__factory>;
    getContractFactory(
      name: "PBMTaskManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PBMTaskManager__factory>;
    getContractFactory(
      name: "PBMUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PBMUpgradeable__factory>;
    getContractFactory(
      name: "DSGD",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSGD__factory>;
    getContractFactory(
      name: "PBMVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PBMVault__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IERC1967Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967Upgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1967",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ITimeLockVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITimeLockVault>;
    getContractAt(
      name: "TimeLockVaultErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimeLockVaultErrors>;
    getContractAt(
      name: "TimeLockVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimeLockVault>;
    getContractAt(
      name: "PBMAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PBMAccessControl>;
    getContractAt(
      name: "PBMBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PBMBase>;
    getContractAt(
      name: "PBMVaultBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PBMVaultBase>;
    getContractAt(
      name: "IPBM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPBM>;
    getContractAt(
      name: "IPBMTaskManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPBMTaskManager>;
    getContractAt(
      name: "PBMAccessControlErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PBMAccessControlErrors>;
    getContractAt(
      name: "PBMBaseErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PBMBaseErrors>;
    getContractAt(
      name: "PBMTaskManagerErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PBMTaskManagerErrors>;
    getContractAt(
      name: "PBMVaultBaseErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PBMVaultBaseErrors>;
    getContractAt(
      name: "AutomateReady",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutomateReady>;
    getContractAt(
      name: "AutomateTaskCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutomateTaskCreator>;
    getContractAt(
      name: "IAutomate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAutomate>;
    getContractAt(
      name: "IOpsProxyFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOpsProxyFactory>;
    getContractAt(
      name: "ITaskTreasuryUpgradable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITaskTreasuryUpgradable>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "MockPBMTaskManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPBMTaskManager>;
    getContractAt(
      name: "MockPBMTaskManagerFailCancellation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPBMTaskManagerFailCancellation>;
    getContractAt(
      name: "MockPBMTaskManagerRevert",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPBMTaskManagerRevert>;
    getContractAt(
      name: "PBM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PBM>;
    getContractAt(
      name: "PBMStandard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PBMStandard>;
    getContractAt(
      name: "PBMTaskManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PBMTaskManager>;
    getContractAt(
      name: "PBMUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PBMUpgradeable>;
    getContractAt(
      name: "DSGD",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSGD>;
    getContractAt(
      name: "PBMVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PBMVault>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
