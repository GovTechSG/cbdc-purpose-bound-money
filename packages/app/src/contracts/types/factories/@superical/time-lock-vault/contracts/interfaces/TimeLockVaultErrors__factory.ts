/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TimeLockVaultErrors,
  TimeLockVaultErrorsInterface,
} from "../../../../../@superical/time-lock-vault/contracts/interfaces/TimeLockVaultErrors";
import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "DepositAlreadyMatured",
    type: "error",
  },
  {
    inputs: [],
    name: "DepositNotMatured",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidActiveDeposit",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidDepositIdRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "InvalidTransfer",
    type: "error",
  },
  {
    inputs: [],
    name: "ParamAmountIsZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ParamDepositIdsIsEmpty",
    type: "error",
  },
  {
    inputs: [],
    name: "ParamDepositorIsZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ParamLockPeriodIsZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ParamRecipientIsZero",
    type: "error",
  },
] as const;

export class TimeLockVaultErrors__factory {
  static readonly abi = _abi;
  static createInterface(): TimeLockVaultErrorsInterface {
    return new utils.Interface(_abi) as TimeLockVaultErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TimeLockVaultErrors {
    return new Contract(address, _abi, signerOrProvider) as TimeLockVaultErrors;
  }
}
